
Parameters:
  StackName:
    Type: String

  TagKey:
    Type: String
  TagValue:
    Type: String

  DbSubnetIpBlocks: 
    Description: "CIDR Blocks for VPC and Subnets"
    Type: CommaDelimitedList
    Default: "10.0.0.0/16, 10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24, 10.0.4.0/24"

  InternetCidrIpBlocks:
    Type: String
    Default: "0.0.0.0/0"

Resources:

  # Vpc
  Vpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Select [ 0, !Ref DbSubnetIpBlocks ]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      CidrBlock: !Select [ 1, !Ref DbSubnetIpBlocks ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs ""]
      CidrBlock: !Select [ 2, !Ref DbSubnetIpBlocks ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      CidrBlock: !Select [ 3, !Ref DbSubnetIpBlocks ]
      VpcId: !Ref Vpc

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs ""]
      CidrBlock: !Select [ 4, !Ref DbSubnetIpBlocks ]
      VpcId: !Ref Vpc

  # Internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: !Ref TagKey
          Value: !Ref TagValue

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - InternetGateway
      - Vpc
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref Vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref Vpc

  # Routes
  InternetGatewayPublicRouteTable:
    Type: AWS::EC2::Route
    DependsOn: 
      - VPCGatewayAttachment
    Properties: 
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref InternetCidrIpBlocks

  # Subnet-Route Table associations
  SubnetRouteTablePublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PublicRouteTable
      - PublicSubnet1
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  SubnetRouteTablePublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PublicRouteTable
      - PublicSubnet2
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  SubnetRouteTablePrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PrivateRouteTable
      - PrivateSubnet1
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
      
  SubnetRouteTablePrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PrivateRouteTable
      - PrivateSubnet2
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security groups
  ElasticsearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: Vpc
    Properties: 
      GroupDescription: Security group for Elasticsearch
      GroupName: !Sub ${StackName}-es
      SecurityGroupEgress: 
        - CidrIp: !Ref InternetCidrIpBlocks
          Description: Outbound anywhere
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress: 
        - CidrIp: !GetAtt Vpc.CidrBlock
          Description: Allow access within VPC to Elasticsearch through port 443
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags: 
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref Vpc

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: Vpc
    Properties: 
      GroupDescription: Security group for Elasticsearch
      GroupName: !Sub ${StackName}-lambda
      SecurityGroupEgress: 
        - CidrIp: !Ref InternetCidrIpBlocks
          Description: Allow access to anywhere
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress: 
        - CidrIp: !GetAtt Vpc.CidrBlock
          Description: Allow access from anywhere
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      Tags: 
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref Vpc

  # VPC Endpoints
  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - PrivateRouteTable
    Properties: 
      RouteTableIds: 
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc

  VPCEndpointDynamoDB:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - PrivateRouteTable
    Properties: 
      RouteTableIds: 
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc

Outputs:
  Vpc:
    Description: VPC
    Value: !Ref Vpc
    Export:
      Name: !Sub ${StackName}-Vpc

  # Subnets
  PublicSubnet1:
    Description: Public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${StackName}-PublicSubnet1
  PublicSubnet2:
    Description: Public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: Private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${StackName}-PrivateSubnet1
  PrivateSubnet2:
    Description: Private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${StackName}-PrivateSubnet2

  # Route Tables
  PrivateRouteTable:
    Description: Private route table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${StackName}-PrivateRouteTable

  # Security Groups
  ElasticsearchSecurityGroup:
    Description: Security group for Elasticsearch
    Value: !Ref ElasticsearchSecurityGroup
    Export:
      Name: !Sub ${StackName}-ElasticsearchSecurityGroup
  LambdaSecurityGroup:
    Description: Security group for Lambda function
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${StackName}-LambdaSecurityGroup
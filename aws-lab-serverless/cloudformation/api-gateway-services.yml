Parameters:
  StackName:
    Type: String

  TagKey:
    Type: String
  TagValue:
    Type: String

  ApiGatewayRoleArn:
    Type: String
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-west-2:900171207117:certificate/60fa02b4-870c-44be-85ca-3eb6aaf32f4e

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AccountRecoverySetting: 
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: false
      MfaConfiguration: 'OFF'
      DeviceConfiguration: 
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: false
      Policies:
        PasswordPolicy: 
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 7
      UsernameAttributes: 
        - email
      UsernameConfiguration: 
        CaseSensitive: false
      UserPoolName: !Ref StackName

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
      - CognitoUserPool
    Properties: 
      AccessTokenValidity: 3600
      AllowedOAuthFlows: 
        - code
        - implicit
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - email
        - openid
        - profile
      CallbackURLs: 
        - http://localhost
      ClientName: !Ref StackName
      DefaultRedirectURI: http://localhost
      ExplicitAuthFlows: 
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      IdTokenValidity: 3600
      LogoutURLs: 
        - http://localhost/logout
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      UserPoolId: !Ref CognitoUserPool

  UserPoolRecordSetRoute53:
    Type: AWS::Route53::RecordSet
    Properties: 
      ResourceRecords: 
        - 127.0.0.1
      HostedZoneName: fptu.net
      Name: !Sub ${StackName}.fptu.net
      Region: !Ref AWS::Region
      ResourceRecords: 
        - String
      TTL: 300
      Type: A

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn:
      - CognitoUserPool
      - UserPoolRecordSetRoute53
    Properties: 
      CustomDomainConfig: 
        CertificateArn: !Ref CertificateArn
      Domain: !Sub ${StackName}.fptu.net
      UserPoolId: !Ref CognitoUserPool

  UserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    DependsOn:
      - CognitoUserPool
    Properties: 
      DesiredDeliveryMediums: 
        - EMAIL
      MessageAction: SUPPRESS
      UserAttributes: 
        - email: taquy.se@gmail.com
        - email_verified: true
      Username: taquy.se@gmail.com
      UserPoolId: !Ref CognitoUserPool

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      BinaryMediaTypes: 
        - image/png
        - application/octet-stream
      Description: !Sub '${StackName} API Gateway'
      Name: !Ref StackName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  AgwAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    DependsOn:
      - RestApi
      - CognitoUserPool
    Properties: 
      AuthorizerCredentials: !Ref ApiGatewayRoleArn
      IdentitySource: method.request.header.Authorization
      Name: !Ref StackName
      ProviderARNs: 
        - !GetAtt CognitoUserPool.Arn
      RestApiId: !Ref RestApi
      Type: COGNITO_USER_POOLS

  # API Gateway Resource
  AgwBookResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: RestApi
    Properties: 
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: books
      RestApiId: !Ref RestApi

  AgwImageResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: RestApi
    Properties: 
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: images
      RestApiId: !Ref RestApi

  # API Gateway Method
  # AgwMethodInsertBook:
  #   Type: AWS::ApiGateway::Method
  #   DependsOn:
  #     - AgwAuthorizer
  #   Properties: 
  #     AuthorizationType: COGNITO_USER_POOLS
  #     AuthorizerId: !Ref AgwAuthorizer
  #     HttpMethod: String
  #     Integration: 
  #       ConnectionType: INTERNET
  #       ContentHandling: CONVERT_TO_TEXT
  #       IntegrationHttpMethod: POST
  #       TimeoutInMillis: 29000
  #       Type: AWS_PROXY
  #       Uri: String
  #     OperationName: InsertBook
  #     ResourceId: !Ref AgwBookResource
  #     RestApiId: !Ref RestApi